package tls

import (
	"bytes"
	"encoding/hex"
	"math/big"
	"testing"
)

var aesGCMTLSTests = []struct {
	key, iv, plaintext, additionalData, cipher, tag, seq string
}{
	{
		"93317f40c786f35ddc2055822cae2bf6",
		"c7056e8bbcaed2e9e5e3ad6a",
		"474554202f6d792d6274632d757364742d6f7264657220485454502f312e310d0a486f73743a206c6f63616c686f73743a34343330310d0a557365722d4167656e743a20476f2d687474702d636c69656e742f312e310d0a0d0a17",
		"170303006b",
		"c431cb27162e305b5975efcdb5030f54acf3228316c544687e28f0e6a889a7b4d2b549bb1ab13044f4ef7fcd98c001fe4496e2f6ca64615f1386a23bc8aeffa59575b5b8c265add239f626196c873e758120ad0abd0195b6afe463",
		"9effb22af0292b44d1991ffe122fabb3",
		"0000000000000000",
	},
	{
		"4801819462204c26c5c4a92d4bc4c4ef",
		"8d94fd63a433d21bc0f28edb",
		"0f00006b05030067306502303943e01dbb451ccc6414ce40321bd668642036237442a99485b1fc7a71875b7da11ddddf3852927bd3722466c5bf012d023100f3472d95e5427552480a268dbbebdbfbb542da50e425d9b567f9e3208de15bcb734778a7a3c61e85af561c425fc7151e16",
		"1703030080",
		"ad94d5d5f2b6d9d82de9137fda0799389646bb4b6fe12712d68a87df8997b3799618f4055016f177a409338c5c536171ad9709975e3da18d74db5aba99e30b1d15cb5af3ca7425c833d97cb0621f3bbc020876281c0756d76dba3fa5b0cbaa1453a1ec42ce94e31e276dc0903c0d73fd",
		"4e041791d0f2668ea1e46154270d9783",
		"0000000000000002",
	},
	{
		"54ebe50a7e01709182e261b4270ceb1d",
		"e645e2de0a90a9efa4edae72",
		"140000200cec41b6807daacb6a19d349456339798ade790e8c39d9492ce819f08bdc41dd16",
		"1703030035",
		"5f841f055b400b661cd4eb5829abcbc007d4194872ebdc94ae59b3ed6c4ddcd3e6668b55f9",
		"9c580a3a1a75cd39a375726e2da47750",
		"0000000000000003",
	},
	{
		"6a9e10ab7a5e4b9b79b44b6330d777c5",
		"f8bd67959ab4989e76961046",
		"022a15",
		"1703030013",
		"de5e4f",
		"b2f63a928c86bda0df5e7b48cdb845af",
		"0000000000000000",
	},
	{
		"42926cbfc8a3145e1a70cb0d4e9817a0",
		"8a644334650e9a460fe1fe7d",
		"2d31362031353a30333a3030223a207b0a20202020202020202020202022312e206f70656e223a20223133352e37343030222c0a20202020202020202020202022322e2068696768223a20223133352e37343030222c0a20202020202020202020202022332e206c6f77223a20223133352e36303530222c0a20202020202020202020202022342e20636c6f7365223a20223133352e36363030222c0a20202020202020202020202022352e20766f6c756d65223a20223131343338220a20202020202020207d2c0a202020202020202022323032322d30362d31362031353a30323a3030223a207b0a20202020202020202020202022312e206f70656e223a20223133352e35363530222c0a20202020202020202020202022322e2068696768223a20223133352e36393030222c0a20202020202020202020202022332e206c6f77223a20223133352e34383030222c0a20202020202020202020202022342e20636c6f7365223a20223133352e36343030222c0a20202020202020202020202022352e20766f6c756d65223a20223231383134220a20202020202020207d2c0a202020202020202022323032322d30362d31362031353a30313a3030223a207b0a20202020202020202020202022312e206f70656e223a20223133352e33333030222c0a20202020202020202020202022322e2068696768223a20223133352e35363030222c0a20202020202020202020202022332e206c6f77223a20223133352e33323030222c0a20202020202020202020202022342e20636c6f7365223a20223133352e35363030222c0a20202020202020202020202022352e20766f6c756d65223a202239383537220a20202020202020207d2c0a202020202020202022323032322d30362d31362031353a30303a3030223a207b0a20202020202020202020202022312e206f70656e223a20223133352e32393030222c0a20202020202020202020202022322e2068696768223a20223133352e33373530222c0a20202020202020202020202022332e206c6f77223a20223133352e32393030222c0a20202020202020202020202022342e20636c6f7365223a20223133352e33373030222c0a20202020202020202020202022352e20766f6c756d65223a202234383835220a20202020202020207d2c0a202020202020202022323032322d30362d31362031343a35393a3030223a207b0a20202020202020202020202022312e206f70656e223a20223133352e33323030222c0a20202020202020202020202022322e2068696768223a20223133352e33363030222c0a20202020202020202020202022332e206c6f77223a20223133352e32393030222c0a20202020202020202020202022342e20636c6f7365223a20223133352e33313030222c0a20202020202020202020202022352e20766f6c756d65223a202237323335220a20202020202020207d2c0a202020202020202022323032322d30362d31362031343a35383a3030223a207b0a20202020202020202020202022312e206f70656e223a20223133352e34363030222c0a20202020202020202020202022322e2068696768223a20223133352e34363030222c0a20202020202020202020202022332e206c6f77223a20223133352e32393030222c0a20202020202020202020202022342e20636c6f7365223a20223133352e33303530222c0a20202020202020202020202022352e20766f6c756d65223a202238333432220a20202020202020207d2c0a202020202020202022323032322d30362d31362031343a35373a3030223a207b0a20202020202020202020202022312e206f70656e223a20223133352e32333030222c0a20202020202020202020202022322e2068696717",
		"170303056a",
		"8a3be25c8297b7c8bdca339507f81cd80f2bf29cc665177cbf9726131850effe87ad30a3a3b3390bd639909461c147cc1367d5b7c887e8c276b5aaaa10d66e7eeb150fcef7f61be2524506b5f3aa5a8316f5805250134c10337c68c814784d1e037ad5c1d83992880c8a18638ae722738fee7d57ff8e9a1fec0016fed0c02dbb6799bd3a782f8269b916e9eefa4d807e7f09ff3bd89368b468fcbf439e76672ee603719b3fd74b00341f08071bae4c8d51aca6ec8ef3f80f2e588f9236b9ff8305ac9be60e5bd3ee476206bb1249d69e8e73dd6b2773b6439d8d5c8228f597c266cdd7704e5c9008086fb7255c122defc7dccb9f0d8a6fdb63b45229e4bc8d2e1a86fdc5f0064cfba5b305de7523ce29e0057288542558bb69ea92e53ede52c7b869024c123473361e8466e4081e9ead4b0dcb5944fc96dd6fbd668b4b92914f9284a7ba5116936444cb9cfefd7d64946b5f91de2e71aa0ed17fc81f4c201738e90f40a2544d2b0f7bd45b28bbea3af992c7f7a83b1b1757c80387c84db5edbe25c56051861ad4a2a14bff4a9b2acb0772c98296fc675c8563b299efdb95a8c9d069b8407238062fb9e44818b7d65e3187cf427ca96b1ea2e8ec82265ddb4bc9fe39d6f8403671e083372431665e29e5a1a2b55055070aa692556a60241eb229fd72a55f196b3f7b1ca3a944da88118a712c8cb71ac37b1b7385572cb584fb68548507dc676e6976e5f625d449fd7b8b3f22fc998aac2c5b63c5dc64576917a03cfbaaa84a01c68dbaad0f22b07d72e5653a0c8d53dfbda948113a42b01b4efa06a961ecc5aeb7f1f183daec922593f0f687c52a0e0608a61bdc4a85cb1a1b261460cd71411812be598d5716916e7646cbece2613bf300c410ac3c7587c26838697afdc4a5ea465075cc6d8c2bd691996e61ff8bdcfbbb7374d87fa3bc34ae9e22656c79047169adb274997535aaf9024eb9218f57215b720d7a086da5354d9833dc86b1d2131514a06446482ad8cff6ab72147a17201be7595a78a57a3ad4eeedeffe05dac2d20ceeba74e626ab8baee338b78a6943faf042736713b8fa4f608ccd6b94578e8b38500773f1f0919f341817c539a8a6409f21b82ab1eb98bf17beead2f18cbefd331c381018a54497e34616b3c502c186c3d9cd2010fdf5ec038875470d3e06c71931083cc82124b7d848bb4572ad923b6fb62002402fd1844f0bda9773d2d21a4a676078c32699634d976ad1c380adbd50e33f0694a29c0f9be4c6818574de7f5d969f4a8e4f3daf1cc782ffc8be4aaf759641e6ebfe55c140982da89b970d5161085e12166a81d023f9cf8b18dcdab9bad35d53aa83fb72a4d43430a9b2747f45c6ffa4632078de2bd37691068028bc99a3147395b5d042d91a766f7b1180ee77a2fca9ee0b41217dad1003290255f91173bbda75ae9adf2b0d98fb18c265e375efb95e26f9e1714148b602a86e125c6a4d8b289c2c258185217a1583a08c584d28ed9b50b571c13450614e3178fec2e6bb2d1075ca19c2342079600aa1bb63348dfe8e8e8a6b2a2fc3a4e98aaac87087d80474e912ef871824c76b2218fb3a782226080a711168d82dada46113a2f265317e9929c61370c0a81d7ce9d1846ec432cbb44c9b00be9b81bbf972f21db77e8ba898d3e14574ae7f49c22d0cef110b4e7936a9a8180aa89229ed7e101b54155ae234af2bb30320af786dfc5cae812d4e927f4109ee2fbd9812627e99d9449fb0ed8f0199dc6de77ac364f8fe469e999b9c468a517e5d7868be58ebd89f4a2ec1764e9062fba48c8273833dc5c53734951ecdee3b13aedefac971f9d6d76278ab778ab2d6c7d774b403cde74563f5ad3d230a226fc18fdfe465f2e6fc2c429df03965fdab6746aefc59cb453122ad4df0c327df1f774ec01a3366fd22445e2cdac5",
		"3ad71997440deaa02bc4c0e51020b7a9",
		"0000000000000000",
	},
	{
		"d3fb8682616b53460b2ed642d1a1403c",
		"73df5af0ee34235e8821316a",
		"485454502f312e3120323030204f4b0d0a4163636573732d436f6e74726f6c2d416c6c6f772d43726564656e7469616c733a20747275650d0a4163636573732d436f6e74726f6c2d416c6c6f772d486561646572733a204f726967696e2c20582d5265717565737465642d576974682c20436f6e74656e742d547970652c204163636570742c20417574686f72697a6174696f6e0d0a4163636573732d436f6e74726f6c2d416c6c6f772d4d6574686f64733a204745542c20504f53542c205055542c2044454c4554452c204f5054494f4e530d0a4163636573732d436f6e74726f6c2d416c6c6f772d4f726967696e3a202a0d0a436f6e74656e742d547970653a206170706c69636174696f6e2f6a736f6e3b20636861727365743d5554462d380d0a446174653a204672692c203137204a756e20323032322030373a30373a353220474d540d0a436f6e74656e742d4c656e6774683a203139350d0a0d0a7b2232342068696768223a223339363536342e33222c22616c6c2074696d652068696768223a223636303030302e35222c2264617461223a22323032322e30342e3237222c2270616972223a2242544355534454222c22706572736f6e616c2064617461223a7b22616765223a223230222c22696e636f6d65223a22312c3330302c353631204575726f227d2c227072696365223a2233383030322e32222c2274696d65223a2231323a30303a3030222c22766f6c756d65223a22333231363534227d17",
		"1703030234",
		"9703c9171b14f227cc9f37755541b1afc464d1b0cf47ab1546d7b0516258e6c39f6f4f3df11f23c8858f093c7328a7983f73e2e99732a335324569b946a5c9fdeb4b74fa883aab6665e8ba4a33e7ca908d05f9b6a94e9eb92f98754b97a59439e21f76f69dd62f707ed00ebb4a76ff501aea472ed1ea03224071d37d5be82f2c39ff32d083a35f4758c9486db133c3797906b84a9a9d2346231f08383a938758b04136015c37590c1fd5ae15230f37f41275b72c9da11854afd7531eacafe75362d7813f096a7f0c2f844bed5b84f1437ea0e7e21cac6eaedf684c69eb54850ca4e9220702cebc378c0873e36ba13269d1e0d5df64d37f22a289a768a77d8cc1671cac5b4046ac93c5f11e0459875dbcb5b3b901ef21d615c2159eaec7d7fb254903c8c288bf90376b96edd7313c759dc4097196a91c4de09f636b63970d50ec6f39365a2f010a566fcda5acf1b7cd613b558e180b177e00917ac10b96bd33ce48f64d916762a3d087e562d8c271bcb67098c0092908aeb160a796c49e6d5d8a7f56bae03cf7bfc6a37334206f34ed8f557d10e146a2ac8fd6b078ad5fb176b22465d20f750b56c99bbe685b0e39e926959257550b8a48d242c11429ae07befe930d6759ed53c2074602ebf0dd28cd08712da0cbe3f126d034bf3d59a38c3e2174734e060df925534eaa522652758fc27332e7c1f503aabd74549e66d0a50e07667d0d227e2d498a3e11333f6bbfaf851b3590b4071426c7dee81651f4f40f848088575c",
		"4e594143d626c30bb92836fb69c8f2aa",
		"0000000000000000",
	},
	{
		"7ae96fc93bebbe1f48809ebd9cc618ee",
		"066b8a1e38982eb7494bf58f",
		"474554202f71756572793f66756e6374696f6e3d54494d455f5345524945535f494e5452414441592673796d626f6c3d49424d26696e74657276616c3d316d696e266170696b65793d64656d6f20485454502f312e310d0a486f73743a207777772e616c70686176616e746167652e636f0d0a557365722d4167656e743a20476f2d687474702d636c69656e742f312e310d0a0d0a17",
		"17030300a6",
		"9683c57a12d6653e4c2f5635e9131d0301ad0d1ba9175ca0f16e0af172b0907c363393714765dfec663929d95fe42d1e19be59c06c2b4394aa1e79f780d322750366ba5494b47541e692820bc56a45e714a70ce6ab322d1c9731ba8fc4f70fb9939ee526f3e530113f62c15097527efd6396b16f47432b0a7ec1fb67bd8a61c194be3b19039dd6bb4455ccf6241bb1969950f2568b8d",
		"c62417657ec800288b2ed4b49a4bd0c8",
		"0000000000000000",
	},
}

var aesGCMArbitraryTests = []struct {
	key, iv, plaintext, additionalData, cipher, tag string
}{
	{
		"69616d537461657696c6cc6c696e677769616d537461657696c6cc6c696e6777",
		"5072656E7469636548616C6C496e632e",
		"7970746f6437277b536563757269747926170687920616e64204e6574776f7267970746f6437277b536563757269747926170687920616e64204e6574776f72606",
		"5072656E7469636548616C6C496e632e",
		"5395b485ac9977ec41ce540eec46f6525662f4aa73045e8b074164a2b1669f827d93841a1131133a7827b9f7ba5aea226079a4bad50170683ce19174bf888884f2",
		"46ac677f5bcf71d36e7deda47763c0b8",
	},
	{
		"feffe9928665731c6d6a8f9467308308",
		"cafebabefacedbaddecaf888",
		"d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a721c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b39",
		"feedfacedeadbeeffeedfacedeadbeefabaddad2",
		"42831ec2217774244b7221b784d0d49ce3aa212f2c02a4e035c17e2329aca12e21d514b25466931c7d8f6a5aac84aa051ba30b396a0aac973d58e091",
		"5bc94fbc3221a5db94fae95ae7121a47",
	},
}

var SHA256CompressionNoPaddingTest = []struct {
	msg, iv, wantDigest string
}{
	{
		"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
		"6a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd19",
		"ef0c748df4da50a8d6c43c013edc3ce76c9d9fa9a1458ade56eb86c0a64492d2",
	},
}

var SHA256CompressionPaddingTest = []struct {
	msg, iv, wantDigest string
}{
	{
		"ff",
		"6a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd19",
		"a8100ae6aa1940d0b663bb31cd466142ebbdbd5187131b92d93818987832eb89",
	},
	{
		"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
		"6a09e667bb67ae853c6ef372a54ff53a510e527f9b05688c1f83d9ab5be0cd19",
		"af9613760f72635fbdb44a5a0a63c39f12af30f950a6ee5c971be188e89c4051",
	},
}

func TestSHA256NoPadding(t *testing.T) {
	for _, test := range SHA256CompressionNoPaddingTest {
		msgStr, _ := new(big.Int).SetString(test.msg, 16)
		ivStr, _ := new(big.Int).SetString(test.iv, 16)
		msg := msgStr.Bytes()
		iv := ivStr.Bytes()
		gotDigest, _ := SHA256Gadget(msg, iv, false, 0)
		wantDigest, _ := new(big.Int).SetString(test.wantDigest, 16)
		if !bytes.Equal(gotDigest, wantDigest.Bytes()) {
			t.Errorf("got = % x, want % x", gotDigest, wantDigest)
		}
	}
}

func TestSHA256Padding(t *testing.T) {
	for _, test := range SHA256CompressionPaddingTest {
		msgStr, _ := new(big.Int).SetString(test.msg, 16)
		ivStr, _ := new(big.Int).SetString(test.iv, 16)
		msg := msgStr.Bytes()
		iv := ivStr.Bytes()
		gotDigest, _ := SHA256Gadget(msg, iv, true, 0)
		wantDigest, _ := new(big.Int).SetString(test.wantDigest, 16)
		if !bytes.Equal(gotDigest, wantDigest.Bytes()) {
			t.Errorf("got = % x, want % x", gotDigest, wantDigest)
		}
	}
}

func TestAESEncryptCRT(t *testing.T) {
	keyStr, _ := new(big.Int).SetString("feffe9928665731c6d6a8f9467308308", 16)
	ivStr, _ := new(big.Int).SetString("5072656E7469636548616C6C496e632e", 16)
	plaintextStr, _ := new(big.Int).SetString("d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a721c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b3911111111", 16)

	key := keyStr.Bytes()
	iv := ivStr.Bytes()
	plaintext := plaintextStr.Bytes()
	aes, _ := NewAES(key)

	gotCipher := aes.EncryptCTR(plaintext, iv)
	wantCipherStr, _ := new(big.Int).SetString("A2A28B0E205494E390466F87AA138B7185E94123F5BB0525D686C116C9F56C0536AAC14AFB2F447A49462107F31D9A40A6269D008D814A37CFA472C3D6CA7F8A", 16)

	wantCipher := wantCipherStr.Bytes()

	if !bytes.Equal(gotCipher, wantCipher) {
		t.Errorf("got = %x , want % x", gotCipher, wantCipher)
	}
}

func TestAESEncryptGCMTLSData(t *testing.T) {
	for _, test := range aesGCMTLSTests {

		additionalData, _ := hex.DecodeString(test.additionalData)
		key, _ := hex.DecodeString(test.key)
		iv, _ := hex.DecodeString(test.iv)
		plaintext, _ := hex.DecodeString(test.plaintext)
		seq, _ := hex.DecodeString(test.seq)
		for i, b := range seq {
			iv[4+i] ^= b
		}
		aes, _ := NewAES(key)

		gotCipher, gotTag := aes.EncryptGCM(plaintext, iv, additionalData, 16)
		wantTag, _ := hex.DecodeString(test.tag)
		wantCipher, _ := hex.DecodeString(test.cipher)

		if !bytes.Equal(gotTag, wantTag) {
			t.Errorf("got = % x, want % x", gotTag, wantTag)
		}

		if !bytes.Equal(gotCipher, wantCipher) {
			t.Errorf("got = % x, want % x", gotCipher, wantCipher)
		}

	}

}

func TestAESDecryptGCMTLSData(t *testing.T) {
	for _, test := range aesGCMTLSTests {

		wantAddtionalData, _ := hex.DecodeString(test.additionalData)
		key, _ := hex.DecodeString(test.key)
		iv, _ := hex.DecodeString(test.iv)
		cipher, _ := hex.DecodeString(test.cipher)
		seq, _ := hex.DecodeString(test.seq)
		for i, b := range seq {
			iv[4+i] ^= b
		}
		aes, _ := NewAES(key)

		tag, _ := hex.DecodeString(test.tag)
		wantPlaintext, _ := hex.DecodeString(test.plaintext)
		gotPlaintext := aes.DecryptGCM(cipher, iv, wantAddtionalData, tag)

		if !bytes.Equal(gotPlaintext, wantPlaintext) {
			t.Errorf("got = % x, want % x", gotPlaintext, wantPlaintext)
		}

	}
}

func TestAESEncryptGCMArbitraryData(t *testing.T) {
	for _, test := range aesGCMArbitraryTests {

		auth, _ := hex.DecodeString(test.additionalData)
		key, _ := hex.DecodeString(test.key)
		iv, _ := hex.DecodeString(test.iv)
		plaintext, _ := hex.DecodeString(test.plaintext)
		aes, _ := NewAES(key)

		gotCipher, gotTag := aes.EncryptGCM(plaintext, iv, auth, 16)
		wantTag, _ := hex.DecodeString(test.tag)
		wantCipher, _ := hex.DecodeString(test.cipher)

		if !bytes.Equal(gotTag, wantTag) {
			t.Errorf("got = % x, want % x", gotTag, wantTag)
		}

		if !bytes.Equal(gotCipher, wantCipher) {
			t.Errorf("got = % x, want % x", gotCipher, wantCipher)
		}

	}

}

func TestAESDecryptGCMArbitrayData(t *testing.T) {
	for _, test := range aesGCMArbitraryTests {

		wantAuth, _ := hex.DecodeString(test.additionalData)
		key, _ := hex.DecodeString(test.key)
		iv, _ := hex.DecodeString(test.iv)
		cipher, _ := hex.DecodeString(test.cipher)

		aes, _ := NewAES(key)

		tag, _ := hex.DecodeString(test.tag)
		wantPlaintext, _ := hex.DecodeString(test.plaintext)
		gotPlaintext := aes.DecryptGCM(cipher, iv, wantAuth, tag)

		if !bytes.Equal(gotPlaintext, wantPlaintext) {
			t.Errorf("got = % x, want % x", gotPlaintext, wantPlaintext)
		}

	}
}
